/*KOMIWOJAŻER ZAD.1*/
proc optmodel;
num n=20;
num c{i in 1..n, j in 1..n}=[
0	150	280	180	160	260	310	290	110	190	180	420	310	190	90	280	280	130	170	80
150	0	390	140	150	410	390	440	100	40	310	510	380	260	130	420	260	30	320	120
280	390	0	460	430	190	70	190	380	420	100	140	110	150	370	350	290	360	170	360
180	140	460	0	40	420	480	450	70	160	360	590	480	360	90	360	390	160	340	100
160	150	430	40	0	380	460	410	70	180	340	570	460	340	60	330	390	170	310	70
260	410	190	420	380	0	250	30	360	450	140	300	300	260	340	180	420	380	90	330
310	390	70	480	460	250	0	250	410	420	150	120	50	130	400	410	250	360	230	390
290	440	190	450	410	30	250	0	390	470	160	290	300	280	360	200	440	410	110	360
110	100	380	70	70	360	410	390	0	130	290	520	400	280	30	330	330	110	280	30
190	40	420	160	180	450	420	470	130	0	340	530	400	280	160	460	260	60	360	160
180	310	100	360	340	140	150	160	290	340	0	240	180	120	270	280	280	280	90	260
420	510	140	590	570	300	120	290	520	530	240	0	140	250	510	480	350	470	310	500
310	380	110	480	460	300	50	300	400	400	180	140	0	120	400	450	210	350	260	390
190	260	150	360	340	260	130	280	280	280	120	250	120	0	280	380	160	220	200	270
90	130	370	90	60	340	400	360	30	160	270	510	400	280	0	300	340	130	250	10
280	420	350	360	330	180	410	200	330	460	280	480	450	380	300	0	530	410	190	300
280	260	290	390	390	420	250	440	330	260	280	350	210	160	340	530	0	230	350	330
130	30	360	160	170	380	360	410	110	60	280	470	350	220	130	410	230	0	300	120
170	320	170	340	310	90	230	110	280	360	90	310	260	200	250	190	350	300	0	250
80	120	360	100	70	330	390	360	30	160	260	500	390	270	10	300	330	120	250	0
];
var x{i in 1..n, j in 1..n} binary;
var z{i in 2..n} >=2 <=n;
min koszt = sum{i in 1..n, j in 1..n}c[i,j]*x[i,j];
con do1Miasta{i in 1..n}:
sum{j in 1..n}x[i,j]=1;
con z1Miasta{j in 1..n}:
sum{i in 1..n}x[i,j]=1;
con bezKrCykli{i in 2..n, j in 2..n}:
z[i]-z[j]+n*x[i,j] <= n-1;
/*solve with milp / timetype = 1 maxtime = 15;*/
solve;
print x z;
quit;



/*KOMIWOJAŻER ZAD.2c*/
proc optmodel;
num n=20;
num maxTime = 180;
num c{i in 1..n, j in 1..n}=[
0	5	29	36	16	35	21	33	27	27	30	48	24	42	10	14	2	37	42	35
5	0	34	40	19	40	27	37	30	32	34	53	29	45	16	19	6	42	47	40
29	34	0	18	28	8	11	22	21	10	19	19	5	41	20	19	28	17	18	14
36	40	18	0	42	23	27	8	13	27	7	25	20	59	31	32	36	34	34	4
16	19	28	42	0	30	17	41	37	20	39	44	23	26	12	9	15	27	34	39
35	40	8	23	30	0	14	29	29	10	26	14	12	38	25	23	34	11	11	19
21	27	11	27	17	14	0	29	26	6	26	28	7	32	11	9	20	16	21	24
33	37	22	8	41	29	29	0	7	31	3	33	22	61	30	32	33	39	39	11
27	30	21	13	37	29	26	7	0	29	5	36	20	58	25	28	27	38	40	15
27	32	10	27	20	10	6	31	29	0	28	23	8	31	16	14	26	10	15	24
30	34	19	7	39	26	26	3	5	28	0	31	20	58	27	29	31	36	37	10
48	53	19	25	44	14	28	33	36	23	31	0	24	48	38	37	47	21	16	22
24	29	5	20	23	12	7	22	20	8	20	24	0	39	14	14	23	18	21	17
42	45	41	59	26	38	32	61	58	31	58	48	39	0	35	32	41	28	33	55
10	16	20	31	12	25	11	30	25	16	27	38	14	35	0	4	9	26	32	29
14	19	19	32	9	23	9	32	28	14	29	37	14	32	4	0	12	23	29	30
2	6	28	36	15	34	20	33	27	26	31	47	23	41	9	12	0	35	41	35
37	42	17	34	27	11	16	39	38	10	36	21	18	28	26	23	35	0	7	30
42	47	18	34	34	11	21	39	40	15	37	16	21	33	32	29	41	7	0	29
35	40	14	4	39	19	24	11	15	24	10	22	17	55	29	30	35	30	29	0
];
num t{i in 1..n, j in 1..n}=[
0	5	37	20	12	46	28	24	28	26	18	69	25	29	14	16	1	29	59	23
4	0	18	52	21	48	18	51	28	24	30	47	34	36	13	16	7	45	45	40
22	46	0	24	35	9	15	29	20	9	12	25	3	39	11	25	30	16	17	19
33	24	11	0	61	20	18	10	7	30	4	14	15	38	36	28	32	43	32	4
11	15	27	51	0	29	12	22	40	24	22	44	23	14	14	8	21	32	27	57
39	22	12	17	40	0	8	41	41	7	31	9	12	40	29	22	35	8	14	26
26	35	11	27	11	8	0	30	24	8	35	19	7	27	6	9	14	22	28	27
46	43	23	5	41	20	19	0	10	27	2	49	23	50	21	46	18	41	52	14
26	21	17	9	32	21	32	9	0	35	4	33	26	68	34	41	14	19	53	10
37	45	5	22	16	12	3	37	25	0	16	21	7	43	23	19	35	13	18	25
17	27	18	8	57	28	38	2	5	38	0	18	19	41	29	22	16	50	26	15
35	66	10	37	64	16	31	45	52	25	26	0	22	38	46	53	66	26	17	20
28	29	5	19	26	16	5	24	24	7	12	33	0	30	12	13	14	15	11	20
25	23	59	64	37	26	25	65	73	31	60	35	47	0	39	45	47	22	27	46
9	21	27	39	12	16	13	17	26	18	33	54	16	38	0	4	12	22	31	43
7	19	16	29	10	24	9	28	35	11	41	31	21	28	5	0	13	32	27	30
2	8	40	49	19	32	22	23	25	34	26	30	23	59	11	13	0	50	47	35
53	39	24	46	15	8	23	54	26	6	47	21	20	31	25	23	33	0	5	38
63	61	18	46	27	16	18	58	46	10	20	23	27	38	44	16	42	10	0	27
39	51	15	4	50	27	14	9	9	30	12	17	15	78	26	21	39	17	25	0
];

var x{i in 1..n, j in 1..n} binary;
var z{i in 2..n} >=2 <=n;
min koszt = sum{i in 1..n, j in 1..n}c[i,j]*x[i,j];
con do1Miasta{i in 1..n}:
sum{j in 1..n}x[i,j]=1;
con z1Miasta{j in 1..n}:
sum{i in 1..n}x[i,j]=1;
con bezKrCykli{i in 2..n, j in 2..n}:
z[i]-z[j]+n*x[i,j] <= n-1;
con limitCzasu: 
sum{i in 1..n, j in 1..n}t[i,j]*x[i,j] <= maxTime;
solve with milp / timetype = 1 maxtime = 15;
/*solve;*/
print x z;
quit;